# function check_deployment_status() {
#   local version=$1
#
#   while true; do
#     output=$(fda task-image info "$version")
#     if [[ $output == *"Status:  PREPARED"* ]]; then
#       break
#     fi
#     # echo only the Status line from the output
#     echo "$output" | grep "Status"
#     sleep 5
#   done
#
#   echo "$output"
#   echo "Deployment finished!"
# }



function create-php-project() {
    mkdir bin config docs public resources src tests
    touch src/README.md

}

# Reload zsh
function rzsh() {
  {  
    source ~/.zshrc
  } || {
    echo "zsh load failed"
    return
  }

  echo 'zsh config reloaded from ~/.zshrc'
}

# Reload tmux
function rtmux() {
  {  
    tmux source ~/.tmux.conf
  } || {
    echo "Tmux load failed"
    return
  }

  echo 'TMUX config reloaded from ~/.tmux.conf'
}

# Kill and remove all docker containers, volumes, and images
function docker-reset() {
    docker kill $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -q) -f
    docker volume prune
}

# Create a new markdown file named with the current date in the current
# directory
function create-note() {
    DATE=`date '+%Y%m%d'`
    FILENAME=${DATE}-log.md

    if [ ! -f "$FILENAME" ]; then echo "# $DATE\n" > $FILENAME; fi

    nvim $FILENAME
}

function fn-docker-stop() {
    id=$(docker container ls | fzf | awk '{print $1;}')
    docker stop $id
}

function pull-all() {
    git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
    git pull --all

}

function work-on-issue() {
  issue=$(gh issue list --limit 200 | fzf --header "PLEASE SELECT AN ISSUE TO WORK ON" | awk -F '\t' '{ print $1 }')
  sanitized=$(gh issue view $issue --json "title" | jq -r ".title" | tr '[:upper:]' '[:lower:]' | tr -s -c "a-z0-9\n" "-" | head -c 60)
  branchname=$issue-$sanitized
  shortname=$(echo $branchname | head -c 30)
  if [[ ! -z "$shortname" ]]; then
    git fetch
    existing=$(git branch -a | grep -v remotes | grep $shortname | head -n 1)
    if [[ ! -z "$existing" ]]; then
        sh -c "git switch $existing"
    else
        bold=$(tput bold)
        normal=$(tput sgr0)
        echo "${bold}Please confirm new branch name:${normal}"
        vared branchname
        #base=$(git branch --show-current)
        base=dev
        echo "${bold}Please confirm the base branch:${normal}"
        vared base
        if [[ -z "$base" ]]; then
          base=$(gh repo view --json defaultBranchRef --jq ".defaultBranchRef.name")
        fi
        git checkout -b $branchname origin/$base
        git push --set-upstream origin $branchname
    fi
  fi
}

function git-init(){
    git init
    # git remote add origin https://github.com/$1
    git remote set-url origin git@github.com:$1
    git pull
}

# Generic
alias create-note="create-note"

# # MELI commands
# alias cds="check_deployment_status"
#
# PHP commands
alias create-php-project="create-php-project"

# Docker commands
alias docker-stop="fn-docker-stop"
alias docker-reset="docker-reset"

# Git
alias woi="work-on-issue"
alias ginit="git-init"
alias pullall="pull-all"

# Reload
alias rtmux="rtmux"
alias rzsh="rzsh"
