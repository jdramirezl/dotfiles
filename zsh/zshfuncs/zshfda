function toast() {
    /usr/local/bin/terminal-notifier -title 'Task-Image Update' -message "'$*'"  -sound Glass
}
function toast-error() {
    /usr/local/bin/terminal-notifier -title 'Task-Image Update' -message "'$*'"  -sound Hero
}
function check_run_status() {
  local version output 
  version=$1

  while true; do
    local current_status
    output=$(fda task-image info "$version")
    current_status=$(echo "$output" | grep -o 'Status: .*' | sed 's/Status: //' | sed 's/^ *//;s/ *$//')
    if [[ $current_status == *"PREPARED"* ]]; then
        toast "‚úÖ Task preparation done!"
        break
    elif [[ $current_status == *"STARTING PREPARE"* || 
        $current_status == *"PREPARE VALIDATION"* ]]; then
        toast "üõ†Ô∏è Starting task run"
    elif [[ $current_status == *"PREPARING"* || 
        $current_status == *''* ]]; then
        continue
    else
        toast-error "üö´ Task preparation Failed!"
        echo "Error: Unexpected status: '$current_status'"
        echo "Errors:"
        errors=$(echo "$output" | grep -A9999 'Errors:' | sed -n '/Errors:/,$p' | grep '^ *-')
        echo "$errors"
        return 1  # Stop execution with error
    fi    # echo only the Status line from the output
    echo -e "\r\033$current_status"
    sleep 7
  done

  echo "$output"
  echo "Deployment finished!"
}

function fdar() {
    local id
    id=$1
    local expected_outputs=()
    local expected_inputs_runtime=()
    local expected_inputs_artifacts=()
    local tags=()
    local task_id

    output=$(fda task-image info $id)
   local current_section
   current_section=""
   while IFS= read -r line; do
        if [[ $line == *"Expected outputs:"* ]]; then
            current_section="expected_outputs"
        elif [[ $line == *"runtime:"* ]]; then
            current_section="expected_inputs_runtime"
        elif [[ $line == *"artifacts:"* ]]; then
            current_section="expected_inputs_artifacts"
        elif [[ $line == *"Tags:"* ]]; then
            current_section="tags"
        elif [[ $line == *"Task Image ID:"* ]]; then
            task_id=$(echo "$output" | grep 'Task Image ID:' | awk '{print $4}')
        elif [[ $line == *"-"* ]]; then
            case $current_section in
                "expected_outputs")
                    expected_outputs+=("$(echo ${line#*-} | tr -d ' ')")
                    ;;
                "expected_inputs_runtime")
                    if [[ $line == *"- name"* ]]; then
                        line=$(echo "$line" | sed 's/ name: //')
                        expected_inputs_runtime+=("${line#*-}")
                    fi
                    ;;
                "expected_inputs_artifacts")
                    line=$(echo "$line" | sed 's/ name: //')
                    expected_inputs_artifacts+=("${line#*-}")
                    ;;
                "tags")
                    tags+=("$(echo ${line#*-} | tr -d ' ')")
                    ;;
            esac
        else
            current_section=""
        fi
    done <<< "$output"
    # Output the collected data
    echo "Task image ID: "
    printf '%s\n' "$task_id"
    echo ""
    echo "Expected Outputs:"
    printf '%s\n' "${expected_outputs[@]}"
    echo ""
    echo "Expected Inputs/Runtime:"
    printf '%s\n' "${expected_inputs_runtime[@]}"
    echo ""
    echo "Expected Inputs/Artifacts:"
    printf '%s\n' "${expected_inputs_artifacts[@]}"
    echo ""
    echo "Tags"
    printf '%s\n' "${tags[@]}"
    echo ""
    echo ""
    
    # INPUT
    local version
    local i

    length=${#expected_outputs[@]}
    for ((i=1; i<=$length; i++)); do
        read "version?Enter version for ${expected_outputs[i]}: " 
        expected_outputs[i]="${expected_outputs[i]}:$version"
    done
    echo "Expected Outputs:"
    printf '%s\n' "${expected_outputs[@]}"
    echo ""

    length=${#expected_inputs_runtime[@]}
    for ((i=1; i<=$length; i++)); do
        read "version?Enter input for  ${expected_inputs_runtime[i]}: " 
        expected_inputs_runtime[i]="${expected_inputs_runtime[i]}:$version"
    done
    echo "Expected Outputs:"
    printf '%s\n' "${expected_inputs_runtime[@]}"
    echo ""

    length=${#expected_inputs_artifacts[@]}
    for ((i=1; i<=$length; i++)); do
        read "version?Enter ID for  ${expected_inputs_artifacts[i]}: " 
        expected_inputs_artifacts[i]="${expected_inputs_artifacts[i]}:$version"
    done
    echo "Expected Outputs:"
    printf '%s\n' "${expected_inputs_artifacts[@]}"
    echo ""
}




function check_deployment_status() {
  local version output 
  version=$1

  toast "üõ†Ô∏è Starting task preparation"
  while true; do
    local current_status
    output=$(fda task-image info "$version")
    current_status=$(echo "$output" | grep -o 'Status: .*' | sed 's/Status: //' | sed 's/^ *//;s/ *$//')
    if [[ $current_status == *"PREPARED"* ]]; then
        toast "‚úÖ Task preparation done!"
        break
    elif [[ $current_status == *"STARTING PREPARE"* || 
        $current_status == *"'PREPARE VALIDATION'"* ]]; then
        continue
    elif [[ $current_status == *"PREPARING"* || 
        $current_status == *''* ]]; then
        continue
    else
        toast-error "üö´ Task preparation Failed!"
        echo "Error: Unexpected status: '$current_status'"
        echo "Errors:"
        errors=$(echo "$output" | grep -A9999 'Errors:' | sed -n '/Errors:/,$p' | grep '^ *-')
        echo "$errors"
        return 1  # Stop execution with error
    fi    # echo only the Status line from the output
    echo -e "\r\033$current_status"
    sleep 7
  done

  echo "$output"
  echo "Deployment finished!"
}

function fdap() {
    local name version tags
    name=$1
    version=${*: -1}
    echo "$name"
    echo "$version"
    shift 1
    tags=()

    while [[ $# -gt 0 ]]; do
        if [[ "$1" == "--tag" ]]; then
            shift
            tags+=("$1")
        fi
        shift
    done

    echo "$tags"

    # Construct the fda command
    local fda_command="fda prepare $name --version $version"
    for tag in "${tags[@]}"; do
        fda_command+=" --tag $tag"
    done

    echo $fda_command

    # Execute the constructed fda command
    {
        local fda_output
        fda_output=$(eval "$fda_command")
    } || {
        echo "FDA prepare failed!"
        return 1
    }
    echo "$fda_output"

    # Extract the Task Image ID using grep and cut
    {
        local task_image_id
        task_image_id=$(echo "$fda_output" | grep "Task Image ID" | cut -d ':' -f 2- | tr -d '[:space:]')
    } || {
        echo "FDA prepare failed!"
        return 1
    }
    # run the check_deployment_status command with the task image id
    check_deployment_status $task_image_id
}

alias cds="check_deployment_status"
alias crs="check_run_status"
alias fdap="fdap"

function fdarp() {
    python3 /Users/julianramire/dotfiles/fda_funcs.py "$@"
}

function fdapp(){
    python3 /Users/julianramire/dotfiles/fda_prepare_funcs.py
}
alias fdarp="fdarp"
alias fdapp="fdapp"
